AWSTemplateFormatVersion: "2010-09-09"
Description: FCPL account access
Parameters:
    FirstUserEmailAddress:
        Type: String
    FCPLAccountId:
        Type: String
        AllowedPattern: "^[0-9]+$"
    FCPLPassword:
        Type: String
        NoEcho: true
    S3Bucket:
        Type: String
    MaxCacheAgeHours:
        Type: Number
        Default: 10
    BackgroundRenewIntervalHours:
        Type: Number
        Default: 12
    NotificationEmail:
        Type: String
        Default: 'your@email.com'
Resources:
    UserPool:
        Type: "AWS::Cognito::UserPool"
        Properties:
            AdminCreateUserConfig:
                InviteMessageTemplate:
                    EmailMessage: 'PisoMojado welcomes you to the easier way to use the Fairfax County Public Library.  Here is your verification code: {####}'
                    EmailSubject: "Welcome!"
            AliasAttributes:
                - email
            AutoVerifiedAttributes:
                - email
            EmailVerificationMessage: 'Here is your verification code: {####}'
            EmailVerificationSubject: "Email verification from PisoMojado"
            UserPoolName: pisomojado-fcpl-user-pool
    UserPoolClient:
        Type: "AWS::Cognito::UserPoolClient"
        Properties:
            UserPoolId: !Ref UserPool
    FirstUser:
        Type: "AWS::Cognito::UserPoolUser"
        Properties:
            DesiredDeliveryMediums:
                - EMAIL
            UserAttributes:
                - email: !Ref FirstUserEmailAddress
            UserName: first_user
            UserPoolId: !Ref UserPool
    FcplApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Description: FCPL API
            Name: "fcpl-api"
    FcplApiBooksResource:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref FcplApi
            ParentId: !GetAtt FcplApi.RootResourceId
            PathPart: books
    FcplApiBooksGet:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref FcplApi
            ResourceId: !Ref FcplApiBooksResource
            HttpMethod: GET
            AuthorizationType: NONE
            RequestParameters:
                "method.request.querystring.forceRefresh": false
            Integration:
                IntegrationHttpMethod: POST
                Type: AWS_PROXY
                Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetBooksFunction.Arn}/invocations
    FcplApiBooksOptions:
        Type: "AWS::ApiGateway::Method"
        Properties:
            AuthorizationType: NONE
            RestApiId: !Ref FcplApi
            ResourceId: !Ref FcplApiBooksResource
            HttpMethod: OPTIONS
            Integration:
                IntegrationResponses:
                    - StatusCode: 200
                      ResponseParameters:
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                      ResponseTemplates:
                        application/json: ''
                PassthroughBehavior: WHEN_NO_MATCH
                RequestTemplates:
                    application/json: '{"statusCode": 200}'
                Type: MOCK
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                    application/json: 'Empty'
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: false
                    method.response.header.Access-Control-Allow-Methods: false
                    method.response.header.Access-Control-Allow-Origin: false
    FcplApiDeployment:
        Type: "AWS::ApiGateway::Deployment"
        DependsOn:
            - FcplApiBooksGet
            - FcplApiBooksOptions
        Properties:
            RestApiId: !Ref FcplApi
            Description: Test deployment
    FcplApiStage:
        Type: "AWS::ApiGateway::Stage"
        Properties:
            StageName: test
            RestApiId: !Ref FcplApi
            DeploymentId: !Ref FcplApiDeployment
    GetBooksExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - lambda.amazonaws.com
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: S3BucketAccess
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "s3:GetObject"
                            - "s3:PutObject"
                          Resource: !Sub "arn:aws:s3:::${S3Bucket}/cache/*"
                        - Effect: Allow
                          Action:
                            - "s3:ListBucket"
                          Resource: !Sub "arn:aws:s3:::${S3Bucket}"
    GetBooksFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: "functions/GetBooks/code.zip"
            Environment:
                Variables:
                    FCPLAccountId: !Ref FCPLAccountId
                    FCPLPassword: !Ref FCPLPassword
                    S3Bucket: !Ref S3Bucket
                    CachePrefix: "cache/TEST"
                    MaxCacheAgeHours: !Ref MaxCacheAgeHours
            Handler: index.handler
            Role: !GetAtt GetBooksExecutionRole.Arn
            Runtime: nodejs6.10
            Timeout: 60
    GetBooksApiPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !Ref GetBooksFunction
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FcplApi}/${FcplApiStage}/*/books"
    AutoRenewerExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - lambda.amazonaws.com
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: GetBooksInvokeAccess
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "lambda:InvokeFunction"
                          Resource: !GetAtt GetBooksFunction.Arn
                - PolicyName: SNSTopicPublishAccess
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "sns:Publish"
                          Resource: !Ref RenewalNotificationTopic
    AutoRenewerFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: "functions/AutoRenewer/code.zip"
            Environment:
                Variables:
                    FCPLAccountId: !Ref FCPLAccountId
                    GetBooksFunctionName: !Ref GetBooksFunction
                    SNSTopicArn: !Ref RenewalNotificationTopic
            Handler: index.handler
            Role: !GetAtt AutoRenewerExecutionRole.Arn
            Runtime: nodejs6.10
            Timeout: 120
    AutoRenewerRulePermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !Ref AutoRenewerFunction
            Principal: "events.amazonaws.com"
            SourceArn: !GetAtt BackgroundRenewRule.Arn
    BackgroundRenewRule:
        Type: "AWS::Events::Rule"
        Properties:
            Description: !Sub "Renews books close to expiration every ${BackgroundRenewIntervalHours} hours"
            ScheduleExpression: !Sub "rate(${BackgroundRenewIntervalHours} hours)"
            State: ENABLED
            Targets:
                - Arn: !GetAtt AutoRenewerFunction.Arn
                  Id: RenewerFunctionScheduleTarget
    RenewalNotificationTopic:
        Type: "AWS::SNS::Topic"
        Properties:
            Subscription:
                - Endpoint: !Ref NotificationEmail
                  Protocol: email
Outputs:
    UserPoolProviderName:
        Value: !GetAtt UserPool.ProviderName
    UserPoolProviderURL:
        Value: !GetAtt UserPool.ProviderURL
    UserPoolArn:
        Value: !GetAtt UserPool.Arn
    UserPoolClientId:
        Value: !Ref UserPoolClient
    FcplApiEndpoint:
        Value: !Sub "https://${FcplApi}.execute-api.${AWS::Region}.amazonaws.com/${FcplApiStage}"
    GetBooksFunctionName:
        Value: !Ref GetBooksFunction
    AutoRenewerFunctionName:
        Value: !Ref AutoRenewerFunction
        
