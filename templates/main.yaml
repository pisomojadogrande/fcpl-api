AWSTemplateFormatVersion: "2010-09-09"
Description: FCPL account access
Parameters:
    FCPLHostname:
        Type: String
        Default: "fcplcat.fairfaxcounty.gov"
    S3Bucket:
        Type: String
    MaxCacheAgeHours:
        Type: Number
        Default: 10
    BackgroundRenewIntervalHours:
        Type: Number
        Default: 12
    NotificationSenderEmailAddress:
        Type: String
        Description: Auto-renewal notifications will be sent from this email address
    SecretHashKey:
        Type: String
        Description: Provide a base-64 encoded key for computing hash values in one-click URLs
    WebEndpoint:
        Type: String
        Description: Endpoint for the web app, e.g. https://www.example.com
Resources:
    UserPool:
        Type: "AWS::Cognito::UserPool"
        Properties:
            AdminCreateUserConfig:
                InviteMessageTemplate:
                    EmailMessage: 'PisoMojado welcomes you to the easier way to use the Fairfax County Public Library.  Your username is {username}, and your verification code is {####}.  Have fun!'
                    EmailSubject: "Welcome to the easier way to use FCPL!  from PisoMojado"
            AliasAttributes:
                - email
            AutoVerifiedAttributes:
                - email
            EmailVerificationMessage: 'Your verification code is {####}.  Have fun!'
            EmailVerificationSubject: "Email verification for the easier way to use FCPL (from PisoMojado)"
            Policies:
                PasswordPolicy:
                    MinimumLength: 6
                    RequireLowercase: false
                    RequireNumbers: false
                    RequireSymbols: false
                    RequireUppercase: false
            UserPoolName: pisomojado-fcpl-user-pool
    UserPoolClient:
        Type: "AWS::Cognito::UserPoolClient"
        Properties:
            UserPoolId: !Ref UserPool
    UserTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions:
                - AttributeName: IdentityId
                  AttributeType: S
            KeySchema:
                - AttributeName: IdentityId
                  KeyType: HASH
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
    FcplApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Description: FCPL API
            Name: "fcpl-api"
    FcplApiAuthorizer:
        Type: "AWS::ApiGateway::Authorizer"
        Properties:
            Name: pisomojado-fcpl-user-pool-authorizer
            IdentitySource: "method.request.header.Authorization"
            ProviderARNs:
                - !GetAtt UserPool.Arn
            RestApiId: !Ref FcplApi
            Type: COGNITO_USER_POOLS
    FcplApiGatewayResponse:
        Type: "AWS::ApiGateway::GatewayResponse"
        Properties:
            ResponseParameters:
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
            ResponseType: UNAUTHORIZED
            RestApiId: !Ref FcplApi
            StatusCode: "401"
    FcplApiBooksResource:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref FcplApi
            ParentId: !GetAtt FcplApi.RootResourceId
            PathPart: books
    FcplApiBooksGet:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref FcplApi
            ResourceId: !Ref FcplApiBooksResource
            HttpMethod: GET
            AuthorizationType: NONE
            RequestParameters:
                "method.request.querystring.forceRefresh": false
            Integration:
                IntegrationHttpMethod: POST
                Type: AWS_PROXY
                Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetBooksFunction.Arn}/invocations
    FcplApiBooksOptions:
        Type: "AWS::ApiGateway::Method"
        Properties:
            AuthorizationType: NONE
            RestApiId: !Ref FcplApi
            ResourceId: !Ref FcplApiBooksResource
            HttpMethod: OPTIONS
            Integration:
                IntegrationResponses:
                    - StatusCode: 200
                      ResponseParameters:
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                      ResponseTemplates:
                        application/json: ''
                PassthroughBehavior: WHEN_NO_MATCH
                RequestTemplates:
                    application/json: '{"statusCode": 200}'
                Type: MOCK
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                    application/json: 'Empty'
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: false
                    method.response.header.Access-Control-Allow-Methods: false
                    method.response.header.Access-Control-Allow-Origin: false
    FcplApiUserResource:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref FcplApi
            ParentId: !GetAtt FcplApi.RootResourceId
            PathPart: user
    FcplApiUserGet:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref FcplApi
            ResourceId: !Ref FcplApiUserResource
            HttpMethod: GET
            AuthorizationType: COGNITO_USER_POOLS
            AuthorizerId: !Ref FcplApiAuthorizer
            Integration:
                IntegrationHttpMethod: POST
                Type: AWS_PROXY
                Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserFunction.Arn}/invocations
    FcplApiUserPost:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref FcplApi
            ResourceId: !Ref FcplApiUserResource
            HttpMethod: POST
            AuthorizationType: COGNITO_USER_POOLS
            AuthorizerId: !Ref FcplApiAuthorizer
            RequestParameters:
                "method.request.querystring.libraryCardNumber": true
                "method.request.querystring.libraryPassword": true
            Integration:
                IntegrationHttpMethod: POST
                Type: AWS_PROXY
                Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutUserFunction.Arn}/invocations
    FcplApiUserOptions:
        Type: "AWS::ApiGateway::Method"
        Properties:
            AuthorizationType: NONE
            RestApiId: !Ref FcplApi
            ResourceId: !Ref FcplApiUserResource
            HttpMethod: OPTIONS
            Integration:
                IntegrationResponses:
                    - StatusCode: 200
                      ResponseParameters:
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                      ResponseTemplates:
                        application/json: ''
                PassthroughBehavior: WHEN_NO_MATCH
                RequestTemplates:
                    application/json: '{"statusCode": 200}'
                Type: MOCK
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                    application/json: 'Empty'
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: false
                    method.response.header.Access-Control-Allow-Methods: false
                    method.response.header.Access-Control-Allow-Origin: false
    FcplApiUserIdResource:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref FcplApi
            ParentId: !Ref FcplApiUserResource
            PathPart: "{userId}"
    FcplApiUserIdUnsubscribeResource:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref FcplApi
            ParentId: !Ref FcplApiUserIdResource
            PathPart: unsubscribe
    FcplApiUserIdUnsubscribePost:
        Type: "AWS::ApiGateway::Method"
        Properties:
            AuthorizationType: NONE
            RestApiId: !Ref FcplApi
            ResourceId: !Ref FcplApiUserIdUnsubscribeResource
            HttpMethod: POST
            Integration:
                IntegrationHttpMethod: POST
                Type: AWS_PROXY
                Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UnsubscribeUserFunction.Arn}/invocations
    FcplApiUserIdUnsubscribeOptions:
        Type: "AWS::ApiGateway::Method"
        Properties:
            AuthorizationType: NONE
            RestApiId: !Ref FcplApi
            ResourceId: !Ref FcplApiUserIdUnsubscribeResource
            HttpMethod: OPTIONS
            Integration:
                IntegrationResponses:
                    - StatusCode: 200
                      ResponseParameters:
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                      ResponseTemplates:
                        application/json: ''
                PassthroughBehavior: WHEN_NO_MATCH
                RequestTemplates:
                    application/json: '{"statusCode": 200}'
                Type: MOCK
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                    application/json: 'Empty'
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: false
                    method.response.header.Access-Control-Allow-Methods: false
                    method.response.header.Access-Control-Allow-Origin: false
    FcplApiDeployment:
        Type: "AWS::ApiGateway::Deployment"
        DependsOn:
            - FcplApiBooksGet
            - FcplApiBooksOptions
            - FcplApiUserGet
            - FcplApiUserOptions
            - FcplApiUserPost
            - FcplApiUserIdUnsubscribeOptions
            - FcplApiUserIdUnsubscribePost
        Properties:
            RestApiId: !Ref FcplApi
            Description: Test deployment
    FcplApiStage:
        Type: "AWS::ApiGateway::Stage"
        Properties:
            StageName: test
            RestApiId: !Ref FcplApi
            DeploymentId: !Ref FcplApiDeployment
    BooksCacheBucket:
        Type: "AWS::S3::Bucket"
        Properties:
            NotificationConfiguration:
                LambdaConfigurations:
                    - Event: "s3:ObjectCreated:Put"
                      Function: !GetAtt BooksCacheBucketUpdatedFunction.Arn
    GetBooksExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - lambda.amazonaws.com
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: S3BucketAccess
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "s3:GetObject"
                            - "s3:PutObject"
                          Resource: !Sub "${BooksCacheBucket.Arn}/*"
                        - Effect: Allow
                          Action:
                            - "s3:ListBucket"
                          Resource: !GetAtt BooksCacheBucket.Arn
    GetBooksFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: "functions/GetBooks/code.zip"
            Environment:
                Variables:
                    FCPLHostname: !Ref FCPLHostname
                    S3Bucket: !Ref BooksCacheBucket
                    MaxCacheAgeHours: !Ref MaxCacheAgeHours
                    UserTableName: !Ref UserTable
            Handler: index.handler
            Role: !GetAtt GetBooksExecutionRole.Arn
            Runtime: nodejs6.10
            Timeout: 60
    GetBooksApiPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !Ref GetBooksFunction
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FcplApi}/${FcplApiStage}/*/books"
    BooksCacheBucketUpdatedExecutionRole:
        Type: "AWS::IAM::Role"
        Metadata:
            Comment: |
                The S3BucketAccess policy below is overly permissive (Resource: *) because
                CloudFormation sees it as a circular dependency if you try to reference the
                specific bucket resource (BooksCacheBucket).  That's specifically because the
                AWS::S3::Bucket resource references the Lambda function (which, in turn, references
                this role) in its NotificationConfiguration property.  Haven't figured out a
                workaround.
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - lambda.amazonaws.com
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: S3BucketAccess
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "s3:GetObject"
                            - "s3:ListBucket"
                          Resource: "*"
                - PolicyName: EventTableAccess
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "dynamodb:Query"
                            - "dynamodb:PutItem"
                          Resource: !GetAtt EventTable.Arn
    BooksCacheBucketUpdatedFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: "functions/BooksCacheBucketUpdated/code.zip"
            Environment:
                Variables:
                    EventTableName: !Ref EventTable
            Handler: index.handler
            Role: !GetAtt BooksCacheBucketUpdatedExecutionRole.Arn
            Runtime: nodejs6.10
            Timeout: 120
    BooksCacheBucketUpdatedS3Permission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !Ref BooksCacheBucketUpdatedFunction
            Principal: "s3.amazonaws.com"
            SourceAccount: !Ref AWS::AccountId
            SourceArn: !GetAtt BooksCacheBucket.Arn
    GetUserExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - lambda.amazonaws.com
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: UserTableAccess
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "dynamodb:GetItem"
                          Resource: !GetAtt UserTable.Arn
    GetUserFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: "functions/GetUser/code.zip"
            Environment:
                Variables:
                    UserTableName: !Ref UserTable
            Handler: index.handler
            Role: !GetAtt GetUserExecutionRole.Arn
            Runtime: nodejs6.10
            Timeout: 60
    GetUserApiPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !Ref GetUserFunction
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FcplApi}/${FcplApiStage}/*/user"
    PutUserExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - lambda.amazonaws.com
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: UserTableAccess
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "dynamodb:PutItem"
                          Resource: !GetAtt UserTable.Arn
                - PolicyName: GetBooksInvokeAccess
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "lambda:InvokeFunction"
                          Resource: !GetAtt GetBooksFunction.Arn
    PutUserFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: "functions/PutUser/code.zip"
            Environment:
                Variables:
                    GetBooksFunctionName: !Ref GetBooksFunction
                    UserTableName: !Ref UserTable
            Handler: index.handler
            Role: !GetAtt PutUserExecutionRole.Arn
            Runtime: nodejs6.10
            Timeout: 60
    PutUserApiPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !Ref PutUserFunction
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FcplApi}/${FcplApiStage}/*/user"
    AutoRenewerStateMachineRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - !Sub states.${AWS::Region}.amazonaws.com
                      Action: "sts:AssumeRole"
            Policies:
                - PolicyName: GetBooksInvokeAccess
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "lambda:InvokeFunction"
                          Resource:
                            - !GetAtt UserIteratorStateFunction.Arn
                            - !GetAtt GetBooksFunction.Arn
                            - !GetAtt AutoRenewerFunction.Arn
                            - !GetAtt EmailNotifyFunction.Arn
    AutoRenewerStateMachine:
        Type: "AWS::StepFunctions::StateMachine"
        Properties:
            RoleArn: !GetAtt AutoRenewerStateMachineRole.Arn
            DefinitionString: !Sub |
                {
                    "Comment": "State machine for automatic renewals",
                    "StartAt": "IteratorState",
                    "States": {
                        "IteratorState": {
                            "Type": "Task",
                            "Resource": "${UserIteratorStateFunction.Arn}",
                            "ResultPath": "$.currentUser",
                            "Next": "DoneIteratingChoiceState"
                        },
                        "DoneIteratingChoiceState": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.currentUser.done",
                                    "BooleanEquals": false,
                                    "Next": "GetBooksState"
                                }
                            ],
                            "Default": "DoneSuccessState"
                        },
                        "GetBooksState": {
                            "Type": "Task",
                            "Resource": "${GetBooksFunction.Arn}",
                            "ResultPath": "$.getBooksResponse",
                            "Next": "AutoRenewerState"
                        },
                        "AutoRenewerState": { 
                            "Type": "Task",
                            "Resource": "${AutoRenewerFunction.Arn}",
                            "ResultPath": "$.autoRenewResult",
                            "Next": "EmailNotifyState"
                        },
                        "EmailNotifyState": {
                            "Type": "Task",
                            "Resource": "${EmailNotifyFunction.Arn}",
                            "ResultPath": "$.emailResult",
                            "Next": "IteratorState"
                        },
                        "DoneSuccessState": {
                            "Type": "Succeed"
                        }
                    }
                }
    UserIteratorStateFunctionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - lambda.amazonaws.com
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: DDBQueryPolicy
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "dynamodb:Scan"
                          Resource: !GetAtt UserTable.Arn
    UserIteratorStateFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Runtime: nodejs6.10
            Timeout: 5
            Handler: index.handler
            Role: !GetAtt UserIteratorStateFunctionRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: "functions/UserIteratorState/code.zip"
            Environment:
                Variables:
                    UserTableName: !Ref UserTable
    AutoRenewerExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - lambda.amazonaws.com
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: GetBooksInvokeAccess
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "lambda:InvokeFunction"
                          Resource: !GetAtt GetBooksFunction.Arn
    AutoRenewerFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: "functions/AutoRenewer/code.zip"
            Environment:
                Variables:
                    FCPLHostname: !Ref FCPLHostname
                    GetBooksFunctionName: !Ref GetBooksFunction
            Handler: index.handler
            Role: !GetAtt AutoRenewerExecutionRole.Arn
            Runtime: nodejs6.10
            Timeout: 120
    EmailNotifyExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - lambda.amazonaws.com
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: SESSendEmailAccess
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "ses:SendEmail"
                          Resource: "*"
                          Condition:
                            StringEquals:
                                "ses:FromAddress": !Ref NotificationSenderEmailAddress
    EmailNotifyFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: "functions/EmailNotify/code.zip"
            Environment:
                Variables:
                    FromAddress: !Ref NotificationSenderEmailAddress
                    SecretHashKey: !Ref SecretHashKey
                    WebEndpoint: !Ref WebEndpoint
            Handler: index.handler
            Role: !GetAtt EmailNotifyExecutionRole.Arn
            Runtime: nodejs6.10
            Timeout: 30
    AutoRenewerStateMachineScheduleRuleRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - events.amazonaws.com
                      Action: "sts:AssumeRole"
            Policies:
                - PolicyName: StateMachineStartExecution
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "states:StartExecution"
                          Resource:
                            - !Ref AutoRenewerStateMachine
    AutoRenewerStateMachineScheduleRule:
        Type: "AWS::Events::Rule"
        Properties:
            Description: !Sub "Renews books for all users that are close to expiration every ${BackgroundRenewIntervalHours} hours"
            ScheduleExpression: !Sub "rate(${BackgroundRenewIntervalHours} hours)"
            State: ENABLED
            Targets:
                - Arn: !Ref AutoRenewerStateMachine
                  Id: AutoRenewerStateMachineScheduleTarget
                  RoleArn: !GetAtt AutoRenewerStateMachineScheduleRuleRole.Arn
    UnsubscribeUserExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - lambda.amazonaws.com
                      Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Policies:
                - PolicyName: UserTableAccess
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - "dynamodb:UpdateItem"
                          Resource: !GetAtt UserTable.Arn
    UnsubscribeUserFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: "functions/UnsubscribeUser/code.zip"
            Environment:
                Variables:
                    SecretHashKey: !Ref SecretHashKey
                    UserTableName: !Ref UserTable
            Handler: index.handler
            Role: !GetAtt UnsubscribeUserExecutionRole.Arn
            Runtime: nodejs6.10
            Timeout: 30
    UnsubscribeUserApiPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !Ref UnsubscribeUserFunction
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FcplApi}/${FcplApiStage}/*/user/*/unsubscribe"
    EventTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions:
                - AttributeName: LibraryCardNumber
                  AttributeType: S
                - AttributeName: Timestamp
                  AttributeType: S
            KeySchema:
                - AttributeName: LibraryCardNumber
                  KeyType: HASH
                - AttributeName: Timestamp
                  KeyType: RANGE
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
Outputs:
    UserPoolProviderName:
        Value: !GetAtt UserPool.ProviderName
    UserPoolProviderURL:
        Value: !GetAtt UserPool.ProviderURL
    UserPoolId:
        Value: !Ref UserPool
    UserPoolArn:
        Value: !GetAtt UserPool.Arn
    UserPoolClientId:
        Value: !Ref UserPoolClient
    FcplApiEndpoint:
        Value: !Sub "https://${FcplApi}.execute-api.${AWS::Region}.amazonaws.com/${FcplApiStage}"
    GetBooksFunctionName:
        Value: !Ref GetBooksFunction
    GetUserFunctionName:
        Value: !Ref GetUserFunction 
    PutUserFunctionName:
        Value: !Ref PutUserFunction
    UserIteratorStateFunctionName:
        Value: !Ref UserIteratorStateFunction
    AutoRenewerFunctionName:
        Value: !Ref AutoRenewerFunction
    EmailNotifyFunctionName:
        Value: !Ref EmailNotifyFunction
    UnsubscribeUserFunctionName:
        Value: !Ref UnsubscribeUserFunction
    BooksCacheBucket:
        Value: !Ref BooksCacheBucket
    BooksCacheBucketUpdatedFunctionName:
        Value: !Ref BooksCacheBucketUpdatedFunction
    UserTable:
        Value: !Ref UserTable
    EventTable:
        Value: !Ref EventTable
        
